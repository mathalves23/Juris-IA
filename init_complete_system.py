#!/usr/bin/env python3
"""
Script para inicializar o sistema completo do JurisIA com dados de exemplo
Inclui: Usu√°rios, Clientes, Processos, Quadros Kanban, Wiki e Notifica√ß√µes
"""

import os
import sys
from datetime import datetime, timedelta
import random

# Adicionar o diret√≥rio atual ao Python path
sys.path.insert(0, os.getcwd())

from src.extensions import db
from src.models.user import User
from src.models.client import Client
from src.models.process import Process
from src.models.kanban import KanbanBoard, KanbanList, KanbanCard, ChecklistItem, Tag
from src.models.wiki import Wiki, WikiTag
from src.models.notification import Notification
from src.models.subscription import Subscription, Plan

def create_sample_data():
    """Criar dados de exemplo para demonstra√ß√£o"""
    
    print("üîß Iniciando cria√ß√£o de dados de exemplo...")
    
    try:
        # 1. Criar usu√°rio administrador se n√£o existir
        admin = User.query.filter_by(email='admin@jurisia.com').first()
        if not admin:
            admin = User(
                nome='Administrador JurisIA',
                email='admin@jurisia.com',
                telefone='(11) 99999-9999',
                empresa='JurisIA Ltda',
                funcao='Administrador'
            )
            admin.set_password('admin123')
            db.session.add(admin)
            db.session.flush()
            print("‚úÖ Usu√°rio admin criado")
        else:
            print("‚úÖ Usu√°rio admin j√° existe")
        
        # 2. Criar clientes de exemplo
        clientes_exemplos = [
            {
                'nome': 'Jo√£o Silva Santos',
                'documento': '123.456.789-10',
                'tipo_pessoa': 'PF',
                'email': 'joao.silva@email.com',
                'telefone': '(11) 98888-7777',
                'endereco': 'Rua das Flores, 123 - S√£o Paulo/SP'
            },
            {
                'nome': 'Empresa ABC Ltda',
                'documento': '12.345.678/0001-90',
                'tipo_pessoa': 'PJ',
                'email': 'contato@empresaabc.com',
                'telefone': '(11) 3333-4444',
                'endereco': 'Av. Paulista, 1000 - S√£o Paulo/SP'
            }
        ]
        
        clientes = []
        for cliente_data in clientes_exemplos:
            cliente_existente = Client.query.filter_by(documento=cliente_data['documento']).first()
            if not cliente_existente:
                cliente = Client(
                    usuario_id=admin.id,
                    **cliente_data
                )
                db.session.add(cliente)
                clientes.append(cliente)
        
        db.session.flush()
        print(f"‚úÖ {len(clientes)} clientes criados")
        
        # 3. Criar processos de exemplo
        if clientes:
            processos_exemplos = [
                {
                    'numero': '1234567-89.2024.8.26.0100',
                    'tribunal': 'TJSP',
                    'vara': '1¬™ Vara C√≠vel',
                    'comarca': 'S√£o Paulo',
                    'area': 'C√≠vel',
                    'valor_causa': 50000.00,
                    'parte_contraria': 'Banco XYZ S.A.',
                    'descricao': 'A√ß√£o de cobran√ßa indevida com danos morais'
                }
            ]
            
            processos = []
            for processo_data in processos_exemplos:
                processo_existente = Process.query.filter_by(numero=processo_data['numero']).first()
                if not processo_existente:
                    processo = Process(
                        usuario_id=admin.id,
                        cliente_id=clientes[0].id,
                        **processo_data
                    )
                    db.session.add(processo)
                    processos.append(processo)
            
            db.session.flush()
            print(f"‚úÖ {len(processos)} processos criados")
        
        # 4. Criar quadro Kanban
        board_existente = KanbanBoard.query.filter_by(nome='Processos Gerais').first()
        if not board_existente:
            board = KanbanBoard(
                nome='Processos Gerais',
                area='Geral',
                criado_por=admin.id,
                cor='#3B82F6'
            )
            db.session.add(board)
            db.session.flush()
            
            # Criar listas padr√£o
            listas_padr√£o = [
                {'nome': 'A Fazer', 'ordem': 1, 'cor': '#F3F4F6'},
                {'nome': 'Em Andamento', 'ordem': 2, 'cor': '#DBEAFE'},
                {'nome': 'Conclu√≠do', 'ordem': 3, 'cor': '#D1FAE5'}
            ]
            
            for lista_data in listas_padr√£o:
                lista = KanbanList(
                    quadro_id=board.id,
                    **lista_data
                )
                db.session.add(lista)
            
            db.session.flush()
            print("‚úÖ Quadro Kanban criado")
            
            # Criar cart√£o de exemplo
            if board.listas:
                cartao = KanbanCard(
                    lista_id=board.listas[0].id,
                    titulo='Analisar contesta√ß√£o',
                    descricao='Revisar contesta√ß√£o apresentada pela parte adversa',
                    criado_por=admin.id,
                    ordem=1,
                    prioridade='Alta'
                )
                db.session.add(cartao)
                print("‚úÖ Cart√£o de exemplo criado")
        
        # 5. Criar item da Wiki
        wiki_existente = Wiki.query.filter_by(titulo='Prazos Processuais').first()
        if not wiki_existente:
            wiki = Wiki(
                titulo='Prazos Processuais',
                categoria='Prazos',
                texto='Principais prazos do processo civil:\n\n- Contesta√ß√£o: 15 dias\n- Tr√©plica: 15 dias\n- Recurso: 15 dias',
                autor_id=admin.id,
                status='Publicado'
            )
            db.session.add(wiki)
            print("‚úÖ Item da Wiki criado")
        
        # 6. Criar notifica√ß√£o
        notificacao = Notification(
            usuario_id=admin.id,
            tipo='Sistema',
            titulo='Sistema JurisIA Inicializado',
            mensagem='O sistema foi inicializado com dados de exemplo. Bem-vindo ao JurisIA!',
            prioridade='Normal'
        )
        db.session.add(notificacao)
        print("‚úÖ Notifica√ß√£o criada")
        
        # Commit final
        db.session.commit()
        
        print("\nüéâ Sistema completo inicializado com sucesso!")
        print("\nüîë Credenciais de acesso:")
        print(f"   üìß Email: admin@jurisia.com")
        print(f"   üîí Senha: admin123")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao criar dados de exemplo: {e}")
        db.session.rollback()
        return False

if __name__ == '__main__':
    from src.main import create_app
    
    print("üöÄ Inicializando sistema JurisIA...")
    
    app = create_app()
    with app.app_context():
        try:
            # Criar todas as tabelas
            db.create_all()
            print("‚úÖ Tabelas criadas/verificadas")
            
            # Criar dados de exemplo
            if create_sample_data():
                print("\n‚úÖ Inicializa√ß√£o conclu√≠da com sucesso!")
                print("üåê Voc√™ j√° pode acessar o sistema!")
            else:
                print("\n‚ùå Falha na inicializa√ß√£o")
                
        except Exception as e:
            print(f"‚ùå Erro geral: {e}")
            sys.exit(1) 