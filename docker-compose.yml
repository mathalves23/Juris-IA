version: '3.8'

services:
  # Aplicação principal
  jurissaas-app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: jurissaas-app
    restart: unless-stopped
    ports:
      - "5001:5001"
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://jurissaas_user:jurissaas_pass@postgres:5432/jurissaas_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-super-secret-jwt-key-here}
      - SECRET_KEY=${SECRET_KEY:-your-super-secret-key-here}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LOG_DIR=/app/logs
      - UPLOAD_FOLDER=/app/uploads
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./instance:/app/instance
    depends_on:
      - postgres
      - redis
    networks:
      - jurissaas-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Banco de dados PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: jurisia_postgres
    environment:
      POSTGRES_DB: jurisia
      POSTGRES_USER: jurisia_user
      POSTGRES_PASSWORD: jurisia_password_2024
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    networks:
      - jurisia_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U jurisia_user -d jurisia"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: jurisia_redis
    command: redis-server --appendonly yes --requirepass jurisia_redis_2024
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - jurisia_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx como proxy reverso
  nginx:
    image: nginx:alpine
    container_name: jurisia_nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - jurissaas-app
    networks:
      - jurisia_network
    restart: unless-stopped

  # Monitoramento com Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: jurissaas-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - jurisia_network

  # Grafana para visualização
  grafana:
    image: grafana/grafana:latest
    container_name: jurissaas-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - jurisia_network

  # Backup automático
  backup:
    build: .
    container_name: jurisia_backup
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://jurisia_user:jurisia_password_2024@postgres:5432/jurisia
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_S3_BACKUP_BUCKET=${AWS_S3_BACKUP_BUCKET}
      - AWS_REGION=${AWS_REGION}
    volumes:
      - ./backups:/app/backups
    depends_on:
      - postgres
    networks:
      - jurisia_network
    restart: unless-stopped
    command: python -c "
      import schedule;
      import time;
      from src.utils.backup import BackupManager;
      from src.main import create_app;
      app = create_app('production');
      with app.app_context():
        backup_manager = BackupManager(app);
        schedule.every().day.at('02:00').do(backup_manager.create_backup);
        while True:
          schedule.run_pending();
          time.sleep(60)
      "

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
  grafana_data:

networks:
  jurisia_network:
    driver: bridge 