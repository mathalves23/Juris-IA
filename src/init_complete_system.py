#!/usr/bin/env python3
"""
Script para inicializar o sistema completo do JurisIA com dados de exemplo
Inclui: Usu√°rios, Clientes, Processos, Quadros Kanban, Wiki e Notifica√ß√µes
"""

import os
import sys
from datetime import datetime, timedelta
import random

# Adicionar o diret√≥rio pai ao Python path
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, project_root)

from src.extensions import db
from src.models.user import User
from src.models.client import Client
from src.models.process import Process
from src.models.kanban import KanbanBoard, KanbanList, KanbanCard, ChecklistItem, Tag
from src.models.wiki import Wiki, WikiTag
from src.models.notification import Notification
from src.models.subscription import Subscription, Plan

def create_sample_data():
    """Criar dados de exemplo para demonstra√ß√£o"""
    
    print("üîß Iniciando cria√ß√£o de dados de exemplo...")
    
    try:
        # 1. Criar usu√°rio administrador se n√£o existir
        admin = User.query.filter_by(email='admin@jurisia.com').first()
        if not admin:
            admin = User(
                nome='Administrador JurisIA',
                email='admin@jurisia.com',
                telefone='(11) 99999-9999',
                empresa='JurisIA Ltda',
                funcao='Administrador'
            )
            admin.set_password('admin123')
            db.session.add(admin)
            db.session.flush()
            print("‚úÖ Usu√°rio admin criado")
        else:
            print("‚úÖ Usu√°rio admin j√° existe")
        
        # 2. Criar plano e assinatura para o admin
        plano = Plan.query.filter_by(nome='Empresarial').first()
        if not plano:
            plano = Plan(
                nome='Empresarial',
                preco=399.90,
                limite_documentos=None,  # Ilimitado
                limite_templates=None,
                limite_ia_calls=None,
                features=['documentos_ilimitados', 'templates_ilimitados', 'ia_ilimitada', 'kanban', 'wiki', 'publicacoes']
            )
            db.session.add(plano)
            db.session.flush()
        
        subscription = Subscription.query.filter_by(usuario_id=admin.id).first()
        if not subscription:
            subscription = Subscription(
                usuario_id=admin.id,
                plano_id=plano.id,
                status='ativo',
                data_inicio=datetime.utcnow(),
                data_proximo_pagamento=datetime.utcnow() + timedelta(days=30)
            )
            db.session.add(subscription)
            print("‚úÖ Assinatura criada para admin")
        
        # 3. Criar clientes de exemplo
        clientes_exemplos = [
            {
                'nome': 'Jo√£o Silva Santos',
                'documento': '123.456.789-10',
                'tipo_pessoa': 'PF',
                'email': 'joao.silva@email.com',
                'telefone': '(11) 98888-7777',
                'endereco': 'Rua das Flores, 123 - S√£o Paulo/SP'
            },
            {
                'nome': 'Empresa ABC Ltda',
                'documento': '12.345.678/0001-90',
                'tipo_pessoa': 'PJ',
                'email': 'contato@empresaabc.com',
                'telefone': '(11) 3333-4444',
                'endereco': 'Av. Paulista, 1000 - S√£o Paulo/SP'
            },
            {
                'nome': 'Maria Oliveira Costa',
                'documento': '987.654.321-00',
                'tipo_pessoa': 'PF',
                'email': 'maria.oliveira@email.com',
                'telefone': '(11) 97777-6666',
                'endereco': 'Rua dos Jardins, 456 - S√£o Paulo/SP'
            }
        ]
        
        clientes = []
        for cliente_data in clientes_exemplos:
            cliente_existente = Client.query.filter_by(documento=cliente_data['documento']).first()
            if not cliente_existente:
                cliente = Client(
                    usuario_id=admin.id,
                    **cliente_data
                )
                db.session.add(cliente)
                clientes.append(cliente)
        
        db.session.flush()
        print(f"‚úÖ {len(clientes)} clientes criados")
        
        # 4. Criar processos de exemplo
        processos_exemplos = [
            {
                'numero': '1234567-89.2024.8.26.0100',
                'tribunal': 'TJSP',
                'vara': '1¬™ Vara C√≠vel',
                'comarca': 'S√£o Paulo',
                'area': 'C√≠vel',
                'valor_causa': 50000.00,
                'parte_contraria': 'Banco XYZ S.A.',
                'descricao': 'A√ß√£o de cobran√ßa indevida com danos morais'
            },
            {
                'numero': '9876543-21.2024.5.02.0001',
                'tribunal': 'TRT2',
                'vara': '2¬™ Vara do Trabalho',
                'comarca': 'S√£o Paulo',
                'area': 'Trabalhista',
                'valor_causa': 25000.00,
                'parte_contraria': 'Empresa ABC Ltda',
                'descricao': 'Reclama√ß√£o trabalhista por verbas rescis√≥rias'
            },
            {
                'numero': '5555666-77.2024.8.26.0200',
                'tribunal': 'TJSP',
                'vara': '3¬™ Vara de Fam√≠lia',
                'comarca': 'S√£o Paulo',
                'area': 'Fam√≠lia',
                'valor_causa': 15000.00,
                'parte_contraria': 'Ex-c√¥njuge',
                'descricao': 'A√ß√£o de alimentos'
            }
        ]
        
        processos = []
        for i, processo_data in enumerate(processos_exemplos):
            processo_existente = Process.query.filter_by(numero=processo_data['numero']).first()
            if not processo_existente and i < len(clientes):
                processo = Process(
                    usuario_id=admin.id,
                    cliente_id=clientes[i].id,
                    **processo_data
                )
                db.session.add(processo)
                processos.append(processo)
        
        db.session.flush()
        print(f"‚úÖ {len(processos)} processos criados")
        
        # 5. Criar tags para o sistema
        tags_exemplos = ['Urgente', 'Prazo Curto', 'Importante', 'Revis√£o', 'Aguardando Cliente']
        tags_criadas = []
        
        for tag_nome in tags_exemplos:
            tag_existente = Tag.query.filter_by(nome=tag_nome).first()
            if not tag_existente:
                tag = Tag(nome=tag_nome, cor=f"#{random.randint(0, 16777215):06x}")
                db.session.add(tag)
                tags_criadas.append(tag)
        
        db.session.flush()
        print(f"‚úÖ {len(tags_criadas)} tags criadas")
        
        # 6. Criar quadros Kanban
        boards_exemplos = [
            {
                'nome': 'Processos C√≠veis',
                'area': 'C√≠vel',
                'cor': '#3B82F6'
            },
            {
                'nome': 'Processos Trabalhistas',
                'area': 'Trabalhista',
                'cor': '#10B981'
            },
            {
                'nome': 'Processos de Fam√≠lia',
                'area': 'Fam√≠lia',
                'cor': '#F59E0B'
            }
        ]
        
        boards = []
        for board_data in boards_exemplos:
            board_existente = KanbanBoard.query.filter_by(nome=board_data['nome']).first()
            if not board_existente:
                board = KanbanBoard(
                    criado_por=admin.id,
                    **board_data
                )
                db.session.add(board)
                db.session.flush()
                
                # Criar listas padr√£o para cada board
                listas_padr√£o = [
                    {'nome': 'Novos', 'ordem': 1, 'cor': '#F3F4F6'},
                    {'nome': 'Em An√°lise', 'ordem': 2, 'cor': '#DBEAFE'},
                    {'nome': 'Aguardando Documentos', 'ordem': 3, 'cor': '#FEF3C7'},
                    {'nome': 'Em Andamento', 'ordem': 4, 'cor': '#D1FAE5'},
                    {'nome': 'Conclu√≠do', 'ordem': 5, 'cor': '#D1FAE5'}
                ]
                
                for lista_data in listas_padr√£o:
                    lista = KanbanList(
                        quadro_id=board.id,
                        **lista_data
                    )
                    db.session.add(lista)
                
                boards.append(board)
        
        db.session.flush()
        print(f"‚úÖ {len(boards)} quadros Kanban criados")
        
        # 7. Criar cart√µes de exemplo
        if boards:
            cartoes_exemplos = [
                {
                    'titulo': 'Analisar contesta√ß√£o',
                    'descricao': 'Revisar contesta√ß√£o apresentada pela parte adversa e preparar tr√©plica',
                    'prioridade': 'Alta',
                    'processo_id': processos[0].id if processos else None
                },
                {
                    'titulo': 'Protocolar peti√ß√£o inicial',
                    'descricao': 'Finalizar e protocolar a peti√ß√£o inicial do processo trabalhista',
                    'prioridade': 'Urgente',
                    'processo_id': processos[1].id if len(processos) > 1 else None
                },
                {
                    'titulo': 'Agendar audi√™ncia',
                    'descricao': 'Entrar em contato com o cart√≥rio para agendar audi√™ncia de concilia√ß√£o',
                    'prioridade': 'M√©dia',
                    'processo_id': processos[2].id if len(processos) > 2 else None
                }
            ]
            
            for i, cartao_data in enumerate(cartoes_exemplos):
                if i < len(boards) and boards[i].listas:
                    # Adicionar na primeira lista do board correspondente
                    lista = boards[i].listas[0]
                    cartao = KanbanCard(
                        lista_id=lista.id,
                        criado_por=admin.id,
                        ordem=i + 1,
                        data_limite=datetime.utcnow() + timedelta(days=random.randint(1, 30)),
                        **cartao_data
                    )
                    db.session.add(cartao)
                    
                    # Adicionar checklist de exemplo
                    checklist_items = [
                        'Revisar documentos',
                        'Analisar jurisprud√™ncia',
                        'Redigir minuta',
                        'Revisar com cliente'
                    ]
                    
                    for j, item_desc in enumerate(checklist_items):
                        db.session.flush()  # Para ter o ID do cart√£o
                        item = ChecklistItem(
                            cartao_id=cartao.id,
                            descricao=item_desc,
                            ordem=j + 1,
                            concluido=random.choice([True, False])
                        )
                        db.session.add(item)
        
        print("‚úÖ Cart√µes e checklists criados")
        
        # 8. Criar itens da Wiki
        wiki_exemplos = [
            {
                'titulo': 'Prazos Processuais C√≠veis',
                'categoria': 'Prazos',
                'texto': 'Resumo dos principais prazos do processo civil:\n\n- Contesta√ß√£o: 15 dias\n- Tr√©plica: 15 dias\n- Alega√ß√µes finais: 15 dias\n- Recurso de apela√ß√£o: 15 dias\n\nLembrar sempre de verificar os dias √∫teis e poss√≠veis prorroga√ß√µes.',
                'status': 'Publicado'
            },
            {
                'titulo': 'Modelo de Peti√ß√£o Inicial - Cobran√ßa',
                'categoria': 'Modelos',
                'texto': 'Estrutura b√°sica para peti√ß√£o inicial de cobran√ßa:\n\n1. Qualifica√ß√£o das partes\n2. Dos fatos\n3. Do direito\n4. Dos pedidos\n5. Do valor da causa\n6. Das provas\n\nAten√ß√£o especial para a fundamenta√ß√£o legal e jurisprudencial.',
                'status': 'Publicado'
            },
            {
                'titulo': 'Jurisprud√™ncia - Danos Morais',
                'categoria': 'Jurisprud√™ncia',
                'texto': 'Principais entendimentos do STJ sobre danos morais:\n\n- Presun√ß√£o de dano moral em casos espec√≠ficos\n- Crit√©rios para fixa√ß√£o do valor\n- S√∫mula 385 do STJ\n\nSempre verificar jurisprud√™ncia atualizada antes de utilizar.',
                'status': 'Publicado'
            }
        ]
        
        for wiki_data in wiki_exemplos:
            wiki_existente = Wiki.query.filter_by(titulo=wiki_data['titulo']).first()
            if not wiki_existente:
                wiki = Wiki(
                    autor_id=admin.id,
                    **wiki_data
                )
                db.session.add(wiki)
                db.session.flush()
                
                # Adicionar tags para os itens da wiki
                if 'Prazos' in wiki.titulo:
                    tag = WikiTag(wiki_id=wiki.id, tag='prazos')
                    db.session.add(tag)
                elif 'Modelo' in wiki.titulo:
                    tag = WikiTag(wiki_id=wiki.id, tag='modelos')
                    db.session.add(tag)
                elif 'Jurisprud√™ncia' in wiki.titulo:
                    tag = WikiTag(wiki_id=wiki.id, tag='jurisprudencia')
                    db.session.add(tag)
        
        print("‚úÖ Itens da Wiki criados")
        
        # 9. Criar notifica√ß√µes de exemplo
        notificacoes_exemplos = [
            {
                'tipo': 'Prazo',
                'titulo': 'Prazo para contesta√ß√£o vencendo',
                'mensagem': 'O prazo para apresentar contesta√ß√£o no processo 1234567-89.2024.8.26.0100 vence em 3 dias.',
                'prioridade': 'Alta'
            },
            {
                'tipo': 'Tarefa',
                'titulo': 'Nova tarefa atribu√≠da',
                'mensagem': 'Uma nova tarefa foi criada no quadro Processos C√≠veis.',
                'prioridade': 'Normal'
            },
            {
                'tipo': 'Wiki',
                'titulo': 'Novo conte√∫do na Wiki',
                'mensagem': 'Um novo item foi adicionado √† categoria Jurisprud√™ncia.',
                'prioridade': 'Baixa'
            }
        ]
        
        for notif_data in notificacoes_exemplos:
            notificacao = Notification(
                usuario_id=admin.id,
                **notif_data
            )
            db.session.add(notificacao)
        
        print("‚úÖ Notifica√ß√µes criadas")
        
        # Commit final
        db.session.commit()
        
        print("\nüéâ Sistema completo inicializado com sucesso!")
        print("\nüìä Resumo dos dados criados:")
        print(f"   üë§ Usu√°rios: 1 (admin@jurisia.com)")
        print(f"   üè¢ Clientes: {len(clientes)}")
        print(f"   üìÅ Processos: {len(processos)}")
        print(f"   üìã Quadros Kanban: {len(boards)}")
        print(f"   üìö Itens Wiki: {len(wiki_exemplos)}")
        print(f"   üîî Notifica√ß√µes: {len(notificacoes_exemplos)}")
        print(f"   üè∑Ô∏è Tags: {len(tags_criadas)}")
        
        print("\nüîë Credenciais de acesso:")
        print(f"   üìß Email: admin@jurisia.com")
        print(f"   üîí Senha: admin123")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao criar dados de exemplo: {e}")
        db.session.rollback()
        return False

if __name__ == '__main__':
    from src.main import create_app
    
    print("üöÄ Inicializando sistema JurisIA com dados completos...")
    
    app = create_app()
    with app.app_context():
        try:
            # Criar todas as tabelas
            db.create_all()
            print("‚úÖ Tabelas criadas/verificadas")
            
            # Criar dados de exemplo
            if create_sample_data():
                print("\n‚úÖ Inicializa√ß√£o conclu√≠da com sucesso!")
                print("üåê Voc√™ j√° pode acessar o sistema!")
            else:
                print("\n‚ùå Falha na inicializa√ß√£o")
                
        except Exception as e:
            print(f"‚ùå Erro geral: {e}")
            sys.exit(1) 